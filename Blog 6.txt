QUESTION 1) If a user attempts to create a resource that already exists—for example, an email address that’s already 
registered—what HTTP status code would you return?

Although the answer to this is debatable, the widely accepted practice would be to use a 409 Conflict HTTP status code.

It would also be acceptable to return a 422 Unprocessable Entity.

Some may argue that a 400 Bad Request is acceptable, but we discourage this, since conventionally it implies the server did 
not understand the request, which in this case is not true.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 2) Consider a responsive site design that requires a full-width image in all responsive states. What would be the 
correct way to code this to ensure the page loads the smallest image required to fill the space?

The key attributes here are srcset and sizes. These attributes allow the developer to specify multiple image sizes for one <img>, 
for example:

<img src="https://example.com/images/image.png" srcset="https://example.com/images/image-1024.png 1024w, 
https://example.com/images/image-512.png 512w" sizes="100vw">

By using srcset and sizes, the browser will then intelligently select the correct image source to be used based on the size of 
the visitor’s viewport.

Any suggestions of changing the image source using JavaScript based on the size of the viewport should be seen as a red flag. 
This indicates the developer has not been keeping current with CSS feature support and/or best practices.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 3) When should you npm and when should you yarn?

 NPM installs dependency packages sequentially, Yarn installs in-parallel. Because of this, Yarn performs faster than NPM when 
 installing larger files.

Both tools also offer the option of saving dependency files in the offline cache. This allows users to install dependencies even 
if they are offline.

In addition, starting from version 2, Yarn uses the Zero install feature. This feature takes the dependency map from the .pnp.cjs 
file and uses it to perform an offline dependency install with virtually zero delays.


-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 4) How can you make sure your dependencies are safe?

- Automate your build and deployment processes. To make your code secure, you need to know what code you are running. This means 
declaring all third-party libraries within build scripts or dependency management systems; building and deploying from source 
control; and keeping records of deployment logs.

- Deploy known-good versions of software. Dependency management tools often allow you to leave the version of each dependency 
indeterminate, which is shorthand for “grab the latest available version at build time.” Try to avoid this - upgrade versions 
deliberately, when you have had chance to review the release notes, and pin dependency versions in your code.

- Be careful of private dependencies. Large organizations often mix public and private dependencies in the same codebase. You should 
be careful how you configure the precedence of repositories in your build process, since dependency confusion attacks - where an 
attacker uploads a malicious copy of a private dependency to a public repository - have caught many organizations off guard.

Use dedicated tools to scan your dependency tree for security risks. Many programming languages and utilities are able to spot 
compromised dependencies. Consider using one or more of the following:

ShiftLeft
Github security alerts
GitLab security scanning
npm audit and retire.js for Node
bundler audit for Ruby.
OWASP dependency-check for Java and .NET

Keep on top of security bulletins. Make sure your team is on the lookout for security announcements for the software you use. This 
can mean signing up for mailing lists, joining forums, or following library developers on social media. The development community 
is often the first become aware of security issues.

Perform regular code reviews so your whole development team knows what third-party libraries are being used, and which parts of 
your codebase depend on them.

Make penetration testing part of your development lifecycle. Penetration testing tools will attempt to take advantage of known 
exploits, checking whether your technology stack contains vulnerable components.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 5) What are the differences between CHAR and VARCHAR data types (MySQL)?

CHAR is fixed length while VARCHAR is variable length. That means, a CHAR(x) string has exactly x characters in length, including 
spaces. A VARCHAR(x) string can have up to x characters and it cuts off trailing spaces, thus might be shorter than the declared 
length.

In terms of efficiency, if you are storing strings with a wildly variable length then use a VARCHAR, if the length is always the 
same, then use a CHAR as it is slightly faster.

They also differ in maximum length where the length of a CHAR value can be any value from 0 to 255 and the maximum length of a 
VARCHAR value is 65,535.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 6) How else can the JavaScript code below be written using Node.Js to produce the same output?

  console.log("first");
    setTimeout(function() {
        console.log("second");
    }, 0);
    console.log("third");

    // Output:

    // first
    // third
    // second


Answer:

  console.log("first");
  setImmediate(() => {
      console.log("second");
  });
  console.log("third");

-----------------------------------------------------------------------------------------------------------------------------------------------------------
