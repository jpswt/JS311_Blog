QUESTION 1) What's the difference between operational and programmer errors?

Operational errors are part of everyday coding life and can happen in both development and in implementation. Operational errors don’t really have to 
do with having written “bad code”, it has more to do with process failure. Examples of this can be, for example, when a server fails to connect to a 
database. Programmer errors are the infamous ‘bugs’ that we hear all about. Programmer errors occur when there are issues with the code itself; it can 
typically be solved by modifying the code somehow.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 2) What is ‘event-driven’ programming?

Event-driven programming is a programming paradigm that relies on special user inputs/interactions that are called ‘events’. Events can be anything such 
as clicks or scrolling.


An event-driven application is a computer program that is written to respond to actions generated by the user or the system. In a computing context, an
event is any identifiable occurrence that has significance for system hardware or software.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 3) What are ‘worker processes’?

A Worker Process is responsible for polling a Task Queue, dequeueing a Task, executing your code in response to a Task, and responding to the Temporal 
Cluster with the results. More formally, a Worker Process is any process that implements the Task Queue Protocol and the Task Execution Protocol.

Worker processes are processes that run on a server that generates a request and response based on client-sent data.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 4) Describe how Node.js can be made more scalable?

Node.js is naturally scalable because of something called ‘load balancing’. Load balancing makes it so that multiple jobs can be run in such a way that 
callbacks are used so there are no significant obstacles that are faced.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 5) Explain global installation of dependencies?

Global installations of dependencies are installed in such a place where the entire computer, regardless of the working file, can access the dependency. 
On the contrary, local installation of dependencies is installed only in the working directory.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 6) Explain RESTful Web Service?

RESTful Web Services, or REST APIs is an architecture that is used to transfer the use of data and functionality through URIs (Uniform Resource Identifiers). 
REST uses a client/server model and HTTP protocol and methods to be able to perform stateless communication.

The key elements of a RESTful implementation are as follows:

1. Resources – The first key element is the resource itself. Let assume that a web application on a server has records of several employees. Let’s assume the 
URL of the web application is http://demo.guru99.com. Now in order to access an employee record resource via REST services, one can issue the command http://demo.guru99.com/employee/1 – This command tells the web server to please provide the details of the employee whose employee number is 1.

2. Request Verbs – These describe what you want to do with the resource. A browser issues a GET verb to instruct the endpoint it wants to get data. However, there are many other verbs available including things like POST, PUT, and DELETE. So in the case of the example http://demo.guru99.com/employee/1 , the web browser is actually issuing a GET Verb because it wants to get the details of the employee record.

3. Request Headers – These are additional instructions sent with the request. These might define the type of response required or the authorization details.
Request Body – Data is sent with the request. Data is normally sent in the request when a POST request is made to the REST web services. In a POST call, the client actually tells the REST web services that it wants to add a resource to the server. Hence, the request body would have the details of the resource which is required to be added to the server.

4. Response Body – This is the main body of the response. So in our RESTful API example, if we were to query the web server via the request http://demo.guru99.com/employee/1 , the web server might return an XML document with all the details of the employee in the Response Body.

5. Response Status codes – These codes are the general codes which are returned along with the response from the web server. An example is the code 200 which is normally returned if there is no error when returning a response to the client.

Restful Methods
The below diagram shows mostly all the verbs (POST, GET, PUT, and DELETE) and an REST API example of what they would mean.

Let’s assume that we have a RESTful web service is defined at the location. http://demo.guru99.com/employee . When the client makes any request to this web service, it can specify any of the normal HTTP verbs of GET, POST, DELETE and PUT. Below is what would happen If the respective verbs were sent by the client.

POST – This would be used to create a new employee using the RESTful web service
GET – This would be used to get a list of all employee using the RESTful web service
PUT – This would be used to update all employee using the RESTful web service
DELETE – This would be used to delete all employee using the RESTful services


-----------------------------------------------------------------------------------------------------------------------------------------------------------

